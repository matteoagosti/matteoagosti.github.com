<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matteo Agosti]]></title>
  <link href="http://www.matteoagosti.com/atom.xml" rel="self"/>
  <link href="http://www.matteoagosti.com/"/>
  <updated>2013-02-24T17:51:43+01:00</updated>
  <id>http://www.matteoagosti.com/</id>
  <author>
    <name><![CDATA[Matteo Agosti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing JavaScript modules for both Browser and Node.js]]></title>
    <link href="http://www.matteoagosti.com/blog/2013/02/24/writing-javascript-modules-for-both-browser-and-node/"/>
    <updated>2013-02-24T11:04:00+01:00</updated>
    <id>http://www.matteoagosti.com/blog/2013/02/24/writing-javascript-modules-for-both-browser-and-node</id>
    <content type="html"><![CDATA[<p>I recently started the complete refactor of <a href="http://feathe.rs" title="Feathers, blogless writing since 2012">feathe.rs</a> and immediately faced with the issue of code reuse between client and server. The app is completely written in JavaScript using Node.js on the server side and requires several validation routines that should also run on the client Browser. With this short article I&#8217;ll explain how to write modules whose code can be easily reused in both Browser and Node.js.</p>

<!-- more-->


<p>Let&#8217;s assume we want to create a module with a <code>Validator</code> object that exports a serie of routines for validating stuff. The Node.js approach would be creating a <code>validator.js</code> file with the following content:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Validator</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Validator</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Validator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Validator</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Validator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then access it in using the <code>require</code> function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Validator</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./validator&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Validator</span><span class="p">({...});</span>
</span><span class='line'><span class="nx">v</span><span class="p">.</span><span class="nx">foo</span><span class="p">(...);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use it in the client we could do the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;validator.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Validator</span><span class="p">({...});</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">foo</span><span class="p">(...);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code will throw an error as the <code>module</code> variable used in <code>validator.js</code> is not defined. However the <code>Validator</code> object sill gets exported, contrary to what happens in Node.js where only what&#8217;s actually being assigned to <code>module.exports</code> is visible outside the module. In order to fix this weird behaviour we have first to deal with the <code>module</code> definition and then with information hiding.</p>

<p>The workaround is to check for <code>module</code> variable definition (including <code>exports</code>) and if undefined, as in the Browser, associate whatever gets exported to the <code>window</code> scope. In addition to it, as to keep information hiding all module&#8217;s code should be wrapped into a closure. The resulting module&#8217;s code would look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Validator</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Validator</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Validator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Validator</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">module</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Validator</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">Validator</span> <span class="o">=</span> <span class="nx">Validator</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to support <code>AMD</code> you can modify the exporting block as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">module</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Validator</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">define</span><span class="p">([],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Validator</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">Validator</span> <span class="o">=</span> <span class="nx">Validator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rate limiting function calls in JavaScript]]></title>
    <link href="http://www.matteoagosti.com/blog/2013/01/22/rate-limiting-function-calls-in-javascript/"/>
    <updated>2013-01-22T00:23:00+01:00</updated>
    <id>http://www.matteoagosti.com/blog/2013/01/22/rate-limiting-function-calls-in-javascript</id>
    <content type="html"><![CDATA[<p>I have recently struggled against the annoying problem of rate limitations. I was trying to connect to a service that prevents you to do more than 5 calls every 5 seconds. I didn&#8217;t want to limit calls at the origin, but instead have some sort of mechanism that could handle limitations automatically by queuing calls and allowing bursts. With this article I&#8217;d like to share the code that helped me achieve this result.</p>

<!-- more-->


<p>The solution to the problem is a <a href="http://en.wikipedia.org/wiki/FIFO" title="FIFO">FIFO</a> queue that gets drained according to the current execution rate. Any operation that needs to be executed is added to the queue once the rate is exhausted and as soon as a slot is available it will get shifted out with the queue entrance priority (first in, first out). In addition to that, I also wanted to introduce a mechanism for handling bursts: there are services that limit your rate using the simple formula <code>maxOperations / interval</code>, but others simply check that you don&#8217;t overpass the maximum number of operations within the allowed interval so that bursts are possible.</p>

<p>I came up with a simple class that you can reuse in your projects whenever you need a mechanism for controlling the rate of function calls. First let&#8217;s look at the full code and then stop on relevant parts:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">RateLimit</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">RateLimit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">maxOps</span><span class="p">,</span> <span class="nx">interval</span><span class="p">,</span> <span class="nx">allowBursts</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_maxRate</span> <span class="o">=</span> <span class="nx">allowBursts</span> <span class="o">?</span> <span class="nx">maxOps</span> <span class="o">:</span> <span class="nx">maxOps</span> <span class="o">/</span> <span class="nx">interval</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_interval</span> <span class="o">=</span> <span class="nx">interval</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_allowBursts</span> <span class="o">=</span> <span class="nx">allowBursts</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_numOps</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_start</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_queue</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">RateLimit</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">schedule</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">rate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">elapsed</span> <span class="o">=</span> <span class="nx">now</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_start</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">elapsed</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_interval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_numOps</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_start</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">rate</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_numOps</span> <span class="o">/</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_allowBursts</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="nx">elapsed</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">rate</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_maxRate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_numOps</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">fn</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">_queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_numOps</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">_queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">that</span><span class="p">.</span><span class="nx">schedule</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span> <span class="mi">1</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">_maxRate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">RateLimit</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may notice from the class constructor that we have three parameters (I implicitly assume their type and haven&#8217;t added any type check):</p>

<ul>
<li><code>maxOps (int)</code>, maximum number of operations allowed</li>
<li><code>interval (int)</code>, timespan (in milliseconds) where <code>maxOps</code> should be calculated</li>
<li><code>allowBursts (boolean)</code>, whether or not bursts are allowed</li>
</ul>


<p>The prototype method <code>schedule</code> is the core function of the class and it accepts a function <code>fn</code> that will be executed according to rate limits. Further improvements can be done on this as, for example, setting out the context where the function is being called. However, for this small article I tried to keep it as simple as possible.</p>

<p>The actual flow of the schedule algorithm can be described as follows (line numbers from the previous code block):</p>

<ul>
<li><code>18-20</code>: first it checks if we are still in the timespan, resetting rate counters otherwise</li>
<li><code>23</code>: then it calculates the current rate based on bursts allowance, equal to the number of operations executed until now when true, or to the frequency of operations executed until now otherwise</li>
<li><code>25-36</code>: if the rate is not exhausted it will execute the current operation immediately when the queue is empty, otherwise it will add the current operation to the queue and execute the first operation that was inserted in the queue (here is the FIFO strategy)</li>
<li><code>37-34</code>: if the rate is exhausted it will add the operation to the queue and postpone the execution of the scheduler on the next available timespan.</li>
</ul>


<p>You&#8217;ll notice that on lines <code>31</code> and <code>38</code> a check on <code>fn</code> is being done. This is due to what happens on line <code>41</code>: when I postpone the execution of the <code>schedule</code> method I do not pass any operation to execute as I want it to process the queue.</p>

<p>Now a working example you can play with to test out the <code>RateLimit</code> class:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">rateLimit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RateLimit</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2000</span><span class="p">,</span> <span class="kc">false</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">delay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">delay</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">numOperation</span><span class="p">,</span> <span class="nx">delay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rateLimit</span><span class="p">.</span><span class="nx">schedule</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Operation %d with delay %d&#39;</span><span class="p">,</span> <span class="nx">numOperation</span><span class="p">,</span> <span class="nx">delay</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span> <span class="nx">delay</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">delay</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example creates 20 operations and simulates their arrival in a sequence where items are delayed randomly between 0 and 10 milliseconds (if you wonder why I used a closure for the <code>setInterval</code> you should check my article on <a href="http://www.matteoagosti.com/blog/2012/09/03/how-to-properly-deal-with-javascript-asynchronous-code/" title="How to Properly Deal With Javascript Asynchronous Code">How to Properly Deal With Javascript Asynchronous Code</a>). Every operation, a simple console log of operation number and the delay of arrival), is passed to an instance of <code>RateLimit</code> configured to allow a maximum number of 5 operations every 2 seconds and without bursts, this means an operation every 400 milliseconds. You can modify the example and see what happens when allowing bursts.</p>

<p>Hopefully this could be any help for you. The code is far from being complete, but it can be considered as a good starting point to develop your own rate limiting strategy. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal website development using a GIT workflow]]></title>
    <link href="http://www.matteoagosti.com/blog/2013/01/17/drupal-website-development-using-a-git-workflow/"/>
    <updated>2013-01-17T21:10:00+01:00</updated>
    <id>http://www.matteoagosti.com/blog/2013/01/17/drupal-website-development-using-a-git-workflow</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using Drupal for almost 2 years now and I really consider it to be on of the best solutions available when you need a powerful CMS. The source code of Drupal and all its modules are managed using GIT and this dramatically simplifies all code management. The goal of this article is to share a workflow entirely based on GIT that supports the creation, deployment and update of a Drupal website. I won&#8217;t cover aspects of Drupal setup and management, just the file handling part and I&#8217;ll assume a bit of familiarity with GIT.</p>

<!-- more-->


<h2>Setup</h2>

<p>The approach I&#8217;m going to describe here will add Drupal as one of the remote origin of the project and all Drupal&#8217;s module as GIT submodules. The latter has several hiccups especially when switching among branches of the main project, but being relatively careful  will keep everything safe. In case you want to know more about GIT submodules in general check out their <a href="http://git-scm.com/book/en/Git-Tools-Submodules" title="Git Tools - Submodules">great guide</a>.</p>

<p>The first step is to create a folder called <code>mywebsite</code> and control its source code using GIT:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir mywebsite
</span><span class='line'><span class="nb">cd </span>mywebsite
</span><span class='line'>git init
</span><span class='line'>touch README
</span><span class='line'>git add README
</span><span class='line'>git commit -am <span class="s2">&quot;Initial commit&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are familiar with GIT you&#8217;ll notice that we created a local repository that has no remote origin, thus any committed changes will stay local. For the purpose of this example I won&#8217;t add a remote repository, but you could easily do it with the following command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add origin git://example.com/git.git/
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s rename the default branch <code>master</code> into <code>development</code> (where all changes will happen) and create a new one for the <code>production</code> environment:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch -m master development
</span><span class='line'>git branch production
</span></code></pre></td></tr></table></div></figure>


<p>Notice that I&#8217;m creating the <code>production</code> branch without the usual <code>-b</code> flag as I don&#8217;t want to set my current branch to it and stick with <code>development</code>.</p>

<p>Now it&#8217;s time to add Drupal core as one of the remote repositories so that we can pull the latest version. At the moment of writing the latest core version is 7.19, but I&#8217;m going to pull the 7.18 as I want to cover an example of core update:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add drupal git://drupalcode.org/project/drupal.git
</span><span class='line'>git pull drupal 7.18
</span></code></pre></td></tr></table></div></figure>


<p>With the <code>pull</code> not only we are asking GIT to <code>fetch</code> the 7.18 tag, but also to <code>merge</code> it with our current branch (<code>development</code>). As a result, GIT will prompt you to add a comment message to the merge operation; you can leave the default message (assuming it fired up <code>vi</code> just save and quit with <code>:wq</code>).</p>

<p>After the core is installed we can add modules. In this example I&#8217;ll simply add one, but you can repeat the command for all modules you need. Simply do not forget to add the branch of the module you want to work on and the path where it should be installed:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git submodule add --branch 7.x-1.x http://git.drupal.org/project/ctools.git sites/all/modules/ctools
</span><span class='line'>git commit -am <span class="s2">&quot;Adding module ctools 7.x-1.x&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Deployment</h2>

<p>Assuming that <code>production</code> will be our deployment branch we just need to check it out and merge changes done in <code>development</code>. Let&#8217;s start by moving into <code>production</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout production
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll notice that GIT will generate an error as it won&#8217;t be able to remove the <code>sites/all/modules/ctools</code> folder due to being not empty.  This is what I previously defined as the hiccup of working with GIT submodules. When you switch branch GIT actually keeps all submodules folder because it considers them as untracked changes;  a submodule, in fact, is seen as a simple reference, so when you switch to a branch that does not have this reference the corresponding folder appears with no mapping and thus is considered as untracked change. To prevent this issue, every time you switch branch into a GIT project that has submodules you have to first force cleaning the repository and then update the submodule content. The same applies when you have different versions of the same submodule across your branches. In order to prevent issues, when you switch branch you should run the following commands:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clean -ffd
</span><span class='line'>git submodule update --init --recursive
</span></code></pre></td></tr></table></div></figure>


<p>Just be aware that by doing this you are going to <strong>loose untracked changes</strong> so before switching branch be sure to commit! As the <code>production</code> environment is empty at this stage, the <code>submodule</code> command won&#8217;t do anything.</p>

<p>Now that we are on the <code>production</code> branch we can merge changes done in the <code>development</code> one:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git merge development
</span></code></pre></td></tr></table></div></figure>


<p>After the merge we now have to update all submodules, as they do not get automatically updated:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git submodule update --init --recursive
</span></code></pre></td></tr></table></div></figure>


<h2>Handling updates</h2>

<p>Now let&#8217;s try to update Drupal core. Before doing that we are going to switch to the <code>development</code> branch:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout development
</span><span class='line'>git clean -ffd
</span><span class='line'>git submodule update --init --recursive
</span></code></pre></td></tr></table></div></figure>


<p>Notice that after checking out I always clean for untracked changes and update submodules as to prevent the issue mentioned before. In a real scenario you won&#8217;t probably need to switch branches continuously as you are going to have the development environment on a machine and the production onto another.</p>

<p>Since we want to pull the last version of Drupal core (7.19 at the moment of writing) we first need to <code>fetch</code> latest code and then <code>merge</code> the latest branch. The <code>fetch</code> operation could be omitted now since Drupal code  probably won&#8217;t change in the middle of this example, but I included it for reference:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git fetch drupal
</span><span class='line'>git merge 7.19
</span></code></pre></td></tr></table></div></figure>


<p>Before checking out the latest branch we had to fetch all updates as to have all changes (obviously this is included as reference, since for this example the code ). Assuming you tested out that everything works fine you can deploy by first checking out the <code>production</code> branch:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout production
</span><span class='line'>git clean -ffd
</span><span class='line'>git submodule update --init --recursive
</span></code></pre></td></tr></table></div></figure>


<p>and then merging changes and updating all submodules:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git merge development
</span><span class='line'>git submodule update --init --recursive
</span></code></pre></td></tr></table></div></figure>


<p>What if you need to update a module? Let&#8217;s switch back to the development branch for an example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout development
</span><span class='line'>git clean -ffd
</span><span class='line'>git submodule update --init --recursive
</span></code></pre></td></tr></table></div></figure>


<p>Whenever you want to update a GIT submodule you need to go in its directory as it is a standalone GIT repository itself, <code>fetch</code> the latest source code and <code>checkout</code> the branch you need:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>sites/all/modules/ctools
</span><span class='line'>git fetch
</span><span class='line'>git checkout 7.x-1.2
</span></code></pre></td></tr></table></div></figure>


<p>You my ask why <code>checkout</code> and not <code>merge</code> as we did with the core. Well, the <code>checkout</code> operation applied to the core would overwrite all GIT project settings resulting in a start from scratch. For the module we do not need to track change so the <code>checkout</code> is more appropriate. In case you decide to work on the module code, than you need to track changes, work on your branch and then do the <code>merge</code>. However, the latter is a real complex scenario that deserves an article on its own.</p>

<p>Now <strong>go back to the root</strong> of our GIT project, the <code>mywebsite</code> folder, and commit your changes:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit -am <span class="s2">&quot;Updating module ctools to 7.x-1.2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is important to execute the above command from the root of the project as we commit on the GIT project not on the GIT submodule.</p>

<p>To deploy changes to the <code>production</code> environment the procedure is the same as mentioned before, first we <code>checkout</code> the <code>production</code> branch:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout production
</span><span class='line'>git clean -ffd
</span><span class='line'>git submodule update --init --recursive
</span><span class='line'>git merge development
</span></code></pre></td></tr></table></div></figure>


<p>and then we <code>merge</code> changes and update submodules:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git merge development
</span><span class='line'>git submodule update --init --recursive
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusions</h2>

<p>With this article I wanted to describe a full GIT workflow to support the creation, deployment and update of websites based on Drupal, with modules handling throughout GIT submodules. There are a couple of drawbacks with this approach mainly due to branch switching when using submodules, however many are the benefits when all your code is always synced up and easy to update. If you want to dig more into details I highly recommend reading the <a href="http://drupal.org/node/803746" title="Building a Drupal site with Git">GIT guide</a> on Drupal website.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The rationale behind andthewinner.is, a platform for viral contests on Twitter]]></title>
    <link href="http://www.matteoagosti.com/blog/2012/11/16/the-rationale-behind-andthewinner-is-a-platform-for-viral-contests-on-twitter/"/>
    <updated>2012-11-16T06:22:00+01:00</updated>
    <id>http://www.matteoagosti.com/blog/2012/11/16/the-rationale-behind-andthewinner-is-a-platform-for-viral-contests-on-twitter</id>
    <content type="html"><![CDATA[<p>On November 10-11th 2012 I attended the <a href="http://nodejsconf.it/" title="Node.js conference Italy homepage">Node.js conference</a> in Brescia (Italy) and participated in the hackathon to experiment and have fun with JavaScript on the server side. Together with <a href="https://twitter.com/nickbalestra" title="Nick Balestra's Twitter profile">@nickbalestra</a> we decided to experiment the realtime aspect of Node.js and as we already had background on dealing with social media we decided to build a platform for viral contests on Twitter. We came up with <a href="http://www.andthewinner.is" title="andthewinner.is homepage">andthewinner.is</a> and with this post I&#8217;d like to share the details on how we built it.</p>

<!-- more-->


<p><img src="http://www.matteoagosti.com/images/posts/andthewinneris-homepage-screenshot.png" alt="Screenshot of a andthewinner.is homepage" /></p>

<h2>Introduction</h2>

<p>Before digging into technical details I&#8217;d like to quickly explain the reason why we came up with this project. As <a href="http://feathe.rs/201211111353" title="Nick Balestra's post on the creation of andthewinner.is">Nick mentioned in his post</a> when we attended TechCrunch 2012 event in Rome we were so shocked by the voting done using <a href="http://www.flickr.com/photos/michele_ficara_manganelli/8043905616/in/set-72157631667552679" title="A picture of people voting for startup ideas using pieces of paper at TechCrunch 2012 event in Rome">pieces of paper</a> that we immediately decided to came up with a solution that should be both tech and social.</p>

<p>We started to think about how voting is done in general (written voting, tele voting, etc…) and decided to focus on a public voting system that should be both quick and viral: Twitter! As of late 2011 there are approximately 250 million Tweets and most of them are part of a discussion identified by an hashtag and will likely include a mention to one or more Twitter users. In addition, a Tweet can be also be done via SMS, avoiding 3G/WiFi network issues (many complained about our point for TechCrunch saying that there was no Internet). If this is not an argument strong enough, you just have to look at the recent 2012 US presidential campaign whose result was totally driven by social media. For these reasons we decided to base andthewinner.is on Twitter and leverage on its sharing mechanism to make contests viral.</p>

<p>The general idea is fairly simple: set an #hashtag to identify the contest and use @mention as identifier for contestants. The point of having an hashtag for the contest was introduced to restrict the scope of voting: counting only mentions would simply lead to the top mentioned person overall on Twitter, whereas having an hashtag could actually set up a context. One nice aspect of this approach is that every time a vote is tweeted, anybody tuned on the hashtag will see the vote and could potentially retweet it, thus leading to another vote! In addition, the  tweet text can be anything, it is enough to include the hashtag and one (or even more than one) mention; this means that I can express my vote not just by picking up an option but also attaching a comment to it. This mechanism wouldn&#8217;t probably fit strict rules of political elections, but it could definitely foster promotion of public events, TV programs and so on.</p>

<p>We created a couple of contests to try it out, you can check them out here:</p>

<ul>
<li><a href="http://www.andthewinner.is/nodejsconfit" title="Node.js Conference Speakers contest">Node.js Conference Speakers</a> where conference attendance could vote their favourite speaker.</li>
<li><a href="http://www.andthewinner.is/xf6italia" title="X Factor 2012 Italia Judges contest">X Factor 2012 Italia Judges</a> where X Factor TV program fans could vote their favourite judge.</li>
</ul>


<p>At the moment andthewinner.is is not yet opened to the public in terms of contest creation, but only for contest participation. This has to deal with limitations in the free Twitter API that I am going to analyse later on. However, we are looking forward to run popular contests and if you feel you could have one please contact us via <a href="https://twitter.com/and_thewinneris" title="andthewinner.is' Twitter profile">Twitter</a>.</p>

<h2>Architecture</h2>

<p>When designing the architecture of andthewinner.is we started to think about splitting it into different components as to keep it maintainable and easily scalable. Dealing with Twitter, a potential source for a huge amount of data, means planning ahead something that is dedicated just to it as when traffic grows this could be spread across different machines. We came up with two macro blocks of components: a <em>crawler</em> for fetching tweets and a <em>server app</em> to provide the website experience. A <em>MySQL</em> database is also used for storing contests and votes. Everything has been developed using node.js and relying on the following modules:</p>

<ul>
<li><a href="https://github.com/mikeal/request" title="Homepage of request module for node.js">request</a> so far one of the most complete module for handling HTTP/HTTPS requests with support for OAuth and streams; basically with this module we can handle any request to Twitter</li>
<li><a href="https://github.com/visionmedia/express" title="Homepage of express module for node.js">express</a> the web framework we use for the server app, handling routes, views rendering, etc…</li>
<li><a href="https://github.com/CarnegieLearning/connect-mysql-session" title="Homepage of connect-mysql-session module for node.js">connect-mysql-session</a> a MySQL session store for express</li>
<li><a href="https://github.com/emberfeather/less.js-middleware" title="Homepage of less-middleware module for node.js">less-middleware</a> a LESS middleware for express</li>
<li><a href="https://github.com/donpark/hbs" title="Homepage of hbs module for node.js">hbs</a> a handlebars template engine for express</li>
<li><a href="https://github.com/felixge/node-mysql" title="Homepage of mysql module for node.js">mysql</a> so far the best module (pure JavaScript) to handle MySQL from node.js; the <a href="http://felixge.de/" title="Felix Geisendörfer personal website">author</a> is mad about performances and his talk at the conference just confirmed that this module is the way to go (an old <a href="http://www.youtube.com/watch?v=Kdwwvps4J9A" title="Video of Felix Geisendörfer talking about benchmarking">talk</a> but on the same topic)</li>
<li><a href="https://github.com/LearnBoost/socket.io" title="Homepage of socket.io module for node.js">socket.io</a> handling web sockets from the server point of view</li>
<li><a href="https://github.com/LearnBoost/socket.io-client" title="Homepage of socket.io-client module for node.js">socket.io-client</a> handling web sockets from the client point of view</li>
</ul>


<h3>Crawler</h3>

<p>The crawler is responsible for handling running contests and deal with the setup / processing of Twitter stream.</p>

<p>As the filtering happens on all tweets and is not restricted to an authenticated user&#8217;s timeline, the <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/filter" title="Twitter public stream API documentation">public stream API</a> has been chosen as the only viable option. However, there are some limitations to bear in mind</p>

<ul>
<li>The number of messages sent to the client is limited to a very small fraction of the total volume of tweets (firehose). If there are more tweets that would match the criteria, they&#8217;ll get discarded.</li>
<li>The stream can be filtered with up to 400 keywords, 5000 mentions, 25 location boxes.</li>
<li>In theory no more than one connection per IP is allowed, even though we went stable up to 11 connections (but this is likely to get banned!). If you try to open two connections to the stream for the same authenticated user the oldest one will get closed, however multiple streams for different users works well (again, until you get banned!).</li>
</ul>


<p>Obviously for the hackathon we could cope with these limitations, but in a real scenario you are forced to switch to <a href="https://dev.twitter.com/programs/twitter-certified-products/products" title="Twitter certified products page">Twitter certified data resellers</a>. That is the main reason why we are not yet opening andthewinner.is to the public.</p>

<p>The logic behind the crawler is fairly simple: it opens a single connection to the stream API using an internal authenticated user and wraps all hashtags into a comma separated values query. Resulting tweets are then processed to find out the related contest and matching participants. This would potentially allow for 400 simultaneously running contests, but depending on their &#8220;popularity&#8221; the stream cap could be reached quite rapidly. So far, we tested it out with popular hashtags and haven&#8217;t reached the cap yet.</p>

<p>Every time a new vote is matched, the database gets updated by increasing contest counters; we decided not to store the originating tweet, but that could be easily done and used for some sort of restrictions (e.g. max number of tweets from the same user) or for statistics (e.g. geo distribution of voters). In any case, when dealing with Twitter contents, it is important to know that if you store data you can&#8217;t display them publicly, but only in a private dashboard.</p>

<p>As to prevent polling the database to find out when a new vote is counted, the crawler provides a socket access to the server app and broadcast the contest data whenever a new update occurs.</p>

<h3>Server app</h3>

<p>The server app is responsible for providing the overall website experience. It is built as an express application and relies on handlebars for rendering page layouts. Page styling is done using a LESS file that is compiled every time the app is started and it includes a responsive layout for a better mobile experience. When the server app is started, it immediately connects to the crawler waiting for contest updates. In addition, it creates a server socket for updating connected clients on specific contest updates; for every contest, in fact,  a channel is created and only its related votes are broadcasted.</p>

<p>Whenever a contest page is requested, the database is queried for fetching data, the handlebars template is compiled and the full page is sent to the client browser; until this point it is not necessary to have support for JavaScript on the client and this allows for fast rendering on mobile devices.</p>

<p>Immediately after the page is loaded the client opens a socket connection with the server app by tuning on the contest channel, thus receiving updates only for the requested contest.</p>

<p>So far everything is pretty standard, there is however a technical solution that in my opinion is worth mentioning as it proves how effective it is to work with JavaScript on both server and client side.</p>

<p>The socket communication exchanges JSON data, so every time a contest receives a vote, a JSON representation of contest and participants is sent to the client. This data structure is normalised from the server as to prevent calculations on the client side; what the server does is basically sorting out rankings, find out if there are ties and so on. As we had mobile devices in mind, we wanted to minimise the time needed for calculus and if you think about contests with a rate of 10 votes per second, unless you rate limit the updates on socket, this would lead to an unusable page. So, the first point of contest normalisation is solved on the server, but what about page rendering on the client? The trick here was to rely on handlebars on the client side too: we precompiled the template we use on the server side (yes, exactly the same template!) as to speed up any operation on the client, and whenever a new update is sent over socket the template is applied to the data structure and the contest HTML replaced with the new one. This gave us an amazing result as we could easily handle 10 votes per second on a mobile device, whereas with the standard solution of processing JSON and rendering the page we could reach a max of 2.7 votes per second.</p>

<p>To sum up, the server app provides a mechanism for normalising contests and the resulting JSON structure is used for compiling the same handlebars file on both server and client. Access to the database is done only on page reload whereas in page updates are done using per-contest channeled socket communication. Did I say already that everything is done in JavaScript? Isn&#8217;t that awesome? :-)</p>

<h2>Conclusions</h2>

<p>With this post I tried to explain the overall architecture of andthewinner.is, a platform for creating viral contests on Twitter. It is an hackathon project whose goal was to play with node.js and realtime communication; despite being a 24 hours coding / designing result, a lot of efforts went in the overall concept and we strongly believe it has a remarkable growing potential. Our goal was also to show the unexplored capabilities of social media platforms and, in some way, to tease traditional voting systems that in our opinion are not effective and viral.</p>

<p>Due to limitations of free APIs the platform is opened only for the voting part, this means that if you want to try out a contest you&#8217;ll have to <a href="mailto:andthewinner.is@beyounic.com" title="Email address of andthewinner.is team">contact us</a>; however, by subscribing commercial data plans any limitation could be bypassed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic screen shot sharing with Dropbox and Automator]]></title>
    <link href="http://www.matteoagosti.com/blog/2012/10/28/automatic-screen-shot-sharing-with-dropbox-and-automator/"/>
    <updated>2012-10-28T22:31:00+01:00</updated>
    <id>http://www.matteoagosti.com/blog/2012/10/28/automatic-screen-shot-sharing-with-dropbox-and-automator</id>
    <content type="html"><![CDATA[<p>After long time using various utilities to automatically share my screen shots when I updated to Montain Lion I had to find another solution as many of them stopped working. It came to my mind that OS X is bundled with Automator, an extremely powerful utility that I always relegated to thumbnails generation. So I decided to give it a try and I eventually made it. That&#8217;s how I did.</p>

<!-- more-->


<p>First, fire up Automator, create a new <code>folder action</code> and associate it to the Desktop, as that is the place where screen shots captured with the 3 fingers key combo are stored.</p>

<p><img src="http://www.matteoagosti.com/images/posts/Screen%20Shot%202012-10-28%20at%2010.42.55%20PM.png" alt="Screenshot of a folder action for desktop" /></p>

<p>Add the <code>Filter Finder Items</code> action to select only images whose file name starts with <code>Screen Shot</code> (if your installation is not in English you may have to replace <code>Screen Shot</code> with the translated version)</p>

<p><img src="http://www.matteoagosti.com/images/posts/Screen%20Shot%202012-10-28%20at%2010.47.00%20PM.png" alt="Screenshot of a folder action for desktop" /></p>

<p>Add the <code>Move Finder Items</code> action to move previously selected files to your Dropbox public folder</p>

<p><img src="http://www.matteoagosti.com/images/posts/Screen%20Shot%202012-10-28%20at%2010.49.01%20PM.png" alt="Screenshot of a folder action for desktop" /></p>

<p>Now the tricky part, add a <code>Run Shell Script</code> action, selecting <code>as argument</code> in the <code>Pass input</code> option and adding the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dropbox="http://dl.dropbox.com/u/XXXXXX/"
</span><span class='line'>url=${dropbox}$(basename $1)
</span><span class='line'>encodedUrl=`echo $url | sed 's/ /%20/g'`
</span><span class='line'>echo -ne ${encodedUrl} | pbcopy
</span><span class='line'>afplay /System/Library/Sounds/Glass.aiff </span></code></pre></td></tr></table></div></figure>


<p>Replace <code>XXXXXX</code> with your Dropbox user id. To find it, just copy the URL of one of your public files (right-click/control-click a file in your Dropbox public folder, then choose from the menu <code>Dropbox</code> > <code>Copy Public Link</code> and paste it somewhere)</p>

<p><img src="http://www.matteoagosti.com/images/posts/Screen%20Shot%202012-10-28%20at%2011.04.54%20PM.png" alt="Screenshot of a folder action for desktop" /></p>

<p>Now save the folder action, close automator and have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to properly deal with Javascript asynchronous code]]></title>
    <link href="http://www.matteoagosti.com/blog/2012/09/03/how-to-properly-deal-with-javascript-asynchronous-code/"/>
    <updated>2012-09-03T12:15:00+02:00</updated>
    <id>http://www.matteoagosti.com/blog/2012/09/03/how-to-properly-deal-with-javascript-asynchronous-code</id>
    <content type="html"><![CDATA[<p>If you are a Javascript developer, you have to deal with asynchronous code. If you are a Javascript developer working with Node.js, asynchronous code is your all in a day&#8217;s work. Let&#8217;s see how to properly deal with asynchronous code, avoiding one of the most common mistake.</p>

<!-- more-->


<p>The instrinsic nature of asynchronous code is that its execution block can occur indipendently of the main program flow, thus providing a non blocking mechanism of executing actions. This means that, potentially, when the asynchronous code runs the status of any shared variables could be different than the one where the code was defined.</p>

<p>Consider the following example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">rankings</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;alice&#39;</span><span class="p">,</span> <span class="s1">&#39;bob&#39;</span><span class="p">,</span> <span class="s1">&#39;eve&#39;</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">rankings</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">rankings</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">},</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The idea is to print every name from the <code>rankings</code> array together with its index. To make the code asynchronous every print is delayed by one second from its predecessor. The output we get is, however, different than what we expected it to be:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">3</span> <span class="kc">undefined</span>
</span><span class='line'><span class="mi">3</span> <span class="kc">undefined</span>
</span><span class='line'><span class="mi">3</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, by the time the asynchronous block is executed, the loop is already ended, so the value of variable <code>i</code> is the one that stops the loop (<code>3</code>). How to prevent this behavior? The answer are <strong>closures</strong>, one of the most powerful features of Javascript; a closure can be seen as a retained scope for Javascript, a function that can have its own variables together with an environment where those variables are binded.</p>

<p>Let&#8217;s fix the previous example using closures:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">rankings</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;alice&#39;</span><span class="p">,</span> <span class="s1">&#39;bob&#39;</span><span class="p">,</span> <span class="s1">&#39;eve&#39;</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">rankings</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">rankings</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">},</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the <code>setTimeout</code> function is wrapped within a closure that has an <code>i</code> argument, whose value is passed at the end of closure definition and corresponds to the loop varialbe <code>i</code>. The output we get is the correct one:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">0</span> <span class="s1">&#39;alice&#39;</span>
</span><span class='line'><span class="mi">1</span> <span class="s1">&#39;bob&#39;</span>
</span><span class='line'><span class="mi">2</span> <span class="s1">&#39;eve&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a really simple example and in this case detecting the error is fairly easy, however when you have to deal with nested async calls the execution flow gets more complex and it may become extremely painful to detect where the error is. Hopefully this helps, as it helped me in writing better code :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 reasons why blog platforms won't foster your writing]]></title>
    <link href="http://www.matteoagosti.com/blog/2012/07/03/10-reasons-why-blog-platforms-won-t-foster-your-writing/"/>
    <updated>2012-07-03T23:12:00+02:00</updated>
    <id>http://www.matteoagosti.com/blog/2012/07/03/10-reasons-why-blog-platforms-won-t-foster-your-writing</id>
    <content type="html"><![CDATA[<p>Have you always wanted to be a blogger, but got stuck? Here&#8217;s why.</p>

<!--more-->


<ol>
<li><p>Finding the right platform for blogging will waste most of your time.</p></li>
<li><p>Once you&#8217;ll find the right platform a huge amount of time will be spent in trying to figure out how it works.</p></li>
<li><p>You&#8217;ll soon discover that categories / tags will be a nightmare to setup as will fit only 90% of posts you write.</p></li>
<li><p>The default theme will fit your needs only during the initial tests and you&#8217;ll soon have to face the coding nightmare.</p></li>
<li><p>You won&#8217;t be able to provide a great reading experience on multiple devices unless you buy an expensive theme and you spend a huge amount of time customizing it.</p></li>
<li><p>Writing will be set back by cluttered rich text editors packed with tons of useless features.</p></li>
<li><p>The listing of your posts will be a huge cause of stress if you can&#8217;t keep up with a good writing pace.</p></li>
<li><p>If you like to write using multiple languages you&#8217;ll be discouraged as this will make your pages a real mess.</p></li>
<li><p>It won&#8217;t be easy to make others aware of your writings if to promote them you have first to promote your whole blog.</p></li>
<li><p>You&#8217;ll soon realize that it is time to find a better platform, and the endless loop will just start again.</p></li>
</ol>


<p>If you want to spend your time writing, rather than wasting it in finding which is the best platform for doing it, you should check out <a href="http://feathe.rs/manifesto" title="Feathers, Blogless writing">Feathers manifesto</a> and stay tuned for updates!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hints for Improving the Learning Process]]></title>
    <link href="http://www.matteoagosti.com/blog/2012/05/19/hints-for-improving-the-learning-process/"/>
    <updated>2012-05-19T22:30:00+02:00</updated>
    <id>http://www.matteoagosti.com/blog/2012/05/19/hints-for-improving-the-learning-process</id>
    <content type="html"><![CDATA[<p>As a software engineer I&#8217;m always challenged with new languages and frameworks, potentially of great use in my daily work. During the last 5 years, in fact, I spent several time (almost everyday) in learning new things. With this post I’d like to share my considerations on how the learning process could be improved. I am far from being an expert on learning methodologies and related-stuff, so consider this post more like a list of tips that works… at least for me :)</p>

<!--more-->


<h2>Avoid information overload and stay focused</h2>

<blockquote><p>Distringit librorum multitudo<br/>(the abundance of books is distraction)</p><footer><strong>Seneca</strong> <cite>Epistulae Morales Ad Lucilium</cite></footer></blockquote>


<p>I wonder what Seneca could have said of our times if almost 2000 years ago there were already too many books. Joking apart, especially when learning new things, the first issue you have to face is trying to narrow down the number of information sources available. It isn’t easy with so many free channels where good information can be found: blogs, tweets linking to other blogs, podcasts, iTunes U and many, many others.</p>

<p>Despite being tempted to read as much as I can, the first thing I do when approaching a new learning subject is find out the community of people behind it and spot which are the individuals with good reputation. By following only the latter I avoid all the redundancy of contents caused by re-posts.</p>

<p>I then list all top resources on the subject discussed within the community - mostly articles and books - and analyze them roughly. I almost end up with a long list of readings that I narrow down to a maximum of 5 items. This doesn’t mean that I’m not going to read everything; it just means that in the first learning phase I’ll force myself to stay within this boundary. Additionally, I try to focus on one reading at a time (from start to end) avoiding multitasking, because it can hurt learning effectiveness. When you start digging deeply into a resource, in fact, the amount of time needed to switch to another one increases dramatically, thus making you learn more slowly and become less efficient.</p>

<h2>Understand your learning styles and combine them</h2>

<p>Another hint for a good learning strategy is understating which are your best ways of learning. This is an absolutely personal factor as everyone has his/her own learning habits and styles. I’d just recommend trying to search for resources that suite your learning styles. As an example, I am that kind of developer that needs to get his hands dirty with the code and best understand things by breaking them down to discover how they are made; I’d also add that is even better if the thing doesn’t work out of the box because solving problems is, at least for me, the best way to make what I’ve learned sticky into my head. After reading books and articles I typically end up finding good projects on GitHub and spend time understanding how they work.</p>

<blockquote><p>The more regions of the brain that store data about a subject, the more interconnection there is.</p><footer><strong>Judy Willis,</strong> <cite><a href='http://www.hopefoundation.org/blog/2012/02/27/research-based-strategies-to-ignite-student-learning/'>www.hopefoundation.org/blog/02/&hellip;</a></cite></footer></blockquote>


<p>Recently I discovered that learning in more than one way could also help in permanently pin things into my mind. Instead of just reading an article, listening to a podcast or watching a screencast - which clearly involves other areas of my brain - helps me in recalling what I’ve learned. I’d suggest focusing on learning in more than just a single way.</p>

<h2>Set learning goals and practice as much as possible</h2>

<blockquote><p>There is no achievement without goals</p><footer><strong>Robert J. McKaine</strong> <cite></cite></footer></blockquote>


<p></p>

<p>Always have learning goals. I should have made this sentence sticky as many of the failures I faced when learning something were due to the lack of clear learning goals. You can see goals as the milestones of a project: without them you clearly don’t have an end, you can’t track your progresses, you can’t motivate yourself for having reached a checkpoint. Actually, without goals you do not have a valuable reason to progress within your learning.</p>

<p>My goals when learning a new language or framework are always related to solving a problem I’ve already went through with other systems. In this way I can focus more on applying what I’m learning rather than understanding the problem itself. Not surprisingly, many times I come out with a better solution thanks to the facilities of the new language. In addition, approaching something you already know, but from a different point of view, forces you to make comparisons and this helps cementing what you have learned.</p>

<p>Always create opportunities to apply what you’ve learned, whether on a sample project or on a real one. The most important thing is that you should do it as soon as possible, not to let going away what you have just learned. Practice is extremely important and you should never stop it. Personally I always try to introduce something new inside my work routine and as soon as there is an opportunity for a new project I jump straight into it by bringing whatever I learned (the fact that this is then accepted is another story :P).</p>

<h2>Teach and get taught</h2>

<blockquote><p>If you can’t explain it simply, you don’t understand it well enough</p><footer><strong>Albert Einstein</strong> <cite></cite></footer></blockquote>


<p></p>

<p>It is well known that one of the best way to learn something is teaching it to someone else. The reason why this is true lies in the fact that to convey notions and make them comprehensible you first have to clearly understand and organize them in your head. One great way to achieve that, even if you don’t have students, is to talk as much as you can with colleagues or friends interested into what you are learning. You’ll be surprised to see how hard is to explain concepts if they are not totally clear in your head. In addition, you could do a sort of knowledge transfer where you get taught back on things that could potentially interest you.</p>

<p>Finally, don’t be afraid of engaging in dialog or ask questions within communities. It’s not easy, but always useful to get others point of view. It can dramatically help in taking the right decisions or solving issues. As an example, during the last months I’ve discovered completely different viewpoints on building server side apps using pure JavaScript; that has been a mind changer for me, always focused on using JS just for front-end development.</p>

<h2>Never stop learning and feed your enthusiasm</h2>

<blockquote><p>If you never stop learning, you will never stop seeing the possibilities</p><footer><strong>Bill Gates</strong> <cite></cite></footer></blockquote>


<p>The last but not least hint is learning over time. In my opinion (and luckily I’m not the only one) the best way to learn is to keep learning. Never think that you reached an end, because around the corner there will always be something new to discover and study. Never think that you reached a perfect state, because there will always be a better way for doing what you’ve already done. The only way to progress and improve is throughout learning. In addition, it has been scientifically proven that the learning process positively affects the brain improving the old gray matter :P</p>

<p>Always be enthusiastic of what you learn and take frustration as a sign of determination.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 5.5 on Mac OS X issues fixed]]></title>
    <link href="http://www.matteoagosti.com/blog/2012/05/14/mysql-5-dot-5-on-mac-os-x-issues-fixed/"/>
    <updated>2012-05-14T21:46:00+02:00</updated>
    <id>http://www.matteoagosti.com/blog/2012/05/14/mysql-5-dot-5-on-mac-os-x-issues-fixed</id>
    <content type="html"><![CDATA[<p>If you have recently installed MySQL 5.5 on Mac OS X you have probably faced some issues with anything that relies on libmysqlclient as, for example, the handy <code>node.js db-mysql</code> or <code>gem mysql2</code> modules.</p>

<!--more-->


<p>The problem lies into the fact that the system doesn&#8217;t know the full path to the library. To solve the issue, you simply have to setup the full path in your enviroment variables. Assuming you have a UNIX system with a Bash shell you could simply run the following command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export DYLD_LIBRARY_PATH=/usr/local/mysql/lib:$DYLD_LIBRARY_PATH&#39;</span> &gt;&gt; ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling Ruby extensions with Xcode 4.3]]></title>
    <link href="http://www.matteoagosti.com/blog/2012/05/14/compiling-ruby-extensions-with-xcode-4-dot-3/"/>
    <updated>2012-05-14T21:12:00+02:00</updated>
    <id>http://www.matteoagosti.com/blog/2012/05/14/compiling-ruby-extensions-with-xcode-4-dot-3</id>
    <content type="html"><![CDATA[<p>Today I decided to try out <a href="http://octopress.org/" title="Visit Octopress website if you are looking for a blogging framework for hackers">Octopress</a> for handling my personal website. As always, things never go as smooth as it should be, otherwise where is the fun?</p>

<!--more-->


<p>The major flaw I had to face was the failure in compiling some Ruby extensions, apparently due to missing header files and binaries.</p>

<p>My system currently runs OS X 10.7.4 with Xcode 4.3 and the <a href="http://adcdownload.apple.com/Developer_Tools/command_line_tools_for_xcode__february_2012/command_line_tools_for_xcode_.dmg" title="Download the standard command line tools for Xcode. Warning, requires an Apple Developer account">standalone command line tools</a> installed (the latter is not any longer packaged into Xcode and has to be installed manually).</p>

<p>After having checked that all required libs and tools were installed on my system I started to think on a path-related issue. Before Xcode 4.3, in fact, all dev related stuff was stored in <code>/Developer</code>, whereas since Xcode 4.3 everything is packed inside the application folder itself.</p>

<p>I found out the handy command line tool <code>xcode-select</code> whose responsability is to manage the path for Xcode and UNIX tools and decided to force the new path:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/
</span></code></pre></td></tr></table></div></figure>


<p>That did the trick and the fact that you are reading this on Octopress proves its success :P</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add spaces to Mac OS X dock]]></title>
    <link href="http://www.matteoagosti.com/blog/2012/05/14/add-spaces-to-mac-os-x-dock/"/>
    <updated>2012-05-14T18:30:00+02:00</updated>
    <id>http://www.matteoagosti.com/blog/2012/05/14/add-spaces-to-mac-os-x-dock</id>
    <content type="html"><![CDATA[<p>I recently discovered that you can easily add spaces between Mac OS X Dock icons. Here&#8217;s how.</p>

<!--more-->


<p>Simply open the Terminal and run the following command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.dock persistent-apps -array-add <span class="s1">&#39;{tile-data={}; tile-type=&quot;spacer-tile&quot;;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To see changes you need to restart the Dock process:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>killall Dock
</span></code></pre></td></tr></table></div></figure>


<p>You can drag and move the spacer between icons as you would do with app icons. If you want to add another spacer simple re-run the first command. An example of what you could obtain</p>

<p><img src="http://www.matteoagosti.com/images/posts/dock-with-spaces.png" alt="Screenshot of a Mac OS X Dock with spaces" /></p>

<p>For geeks: if you want to add the spacer to the right side of the Dock (documents section), run the following command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.apple.dock persistent-others -array-add <span class="s1">&#39;{tile-data={}; tile-type=&quot;spacer-tile&quot;;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
